nohup: ignoring input
/usr/local/lib/python3.10/dist-packages/huggingface_hub/file_download.py:1150: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
/usr/local/lib/python3.10/dist-packages/lightning/fabric/utilities/cloud_io.py:57: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
/usr/local/lib/python3.10/dist-packages/huggingface_hub/file_download.py:1150: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
Some weights of EsmModel were not initialized from the model checkpoint at /workspace/sg666/MDpLM/checkpoints/150M/membrane_automodel/epochs60_lr3e-4_200k-seqs_bsz16_all-params_no-compile_gradclip1_beta-one0.9_beta-two0.999_bf16 and are newly initialized: ['esm.pooler.dense.bias', 'esm.pooler.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
/workspace/sg666/MeMDLM/MeMDLM/src/guidance/main.py:189: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(ckpt_path, map_location='cuda' if torch.cuda.is_available() else 'cpu')
  0%|          | 0/64 [00:00<?, ?it/s]/usr/local/lib/python3.10/dist-packages/torch/nn/functional.py:2994: UserWarning: reduction: 'mean' divides the total loss by both the batch size and the support size.'batchmean' divides only by the batch size, and aligns with the KL div math definition.'mean' will be changed to behave the same as 'batchmean' in the next major release.
  warnings.warn(
  2%|▏         | 1/64 [00:01<01:26,  1.37s/it]  3%|▎         | 2/64 [00:02<01:24,  1.36s/it]  5%|▍         | 3/64 [00:04<01:22,  1.34s/it]  6%|▋         | 4/64 [00:05<01:20,  1.34s/it]  8%|▊         | 5/64 [00:06<01:18,  1.33s/it]  9%|▉         | 6/64 [00:08<01:17,  1.33s/it] 11%|█         | 7/64 [00:09<01:15,  1.33s/it] 12%|█▎        | 8/64 [00:10<01:14,  1.33s/it] 14%|█▍        | 9/64 [00:12<01:13,  1.33s/it] 16%|█▌        | 10/64 [00:13<01:11,  1.33s/it] 17%|█▋        | 11/64 [00:14<01:10,  1.33s/it] 19%|█▉        | 12/64 [00:15<01:08,  1.33s/it] 20%|██        | 13/64 [00:17<01:07,  1.33s/it] 22%|██▏       | 14/64 [00:18<01:06,  1.33s/it] 23%|██▎       | 15/64 [00:19<01:05,  1.33s/it] 25%|██▌       | 16/64 [00:21<01:03,  1.33s/it] 27%|██▋       | 17/64 [00:22<01:02,  1.33s/it] 28%|██▊       | 18/64 [00:23<01:01,  1.33s/it] 30%|██▉       | 19/64 [00:25<00:59,  1.33s/it] 31%|███▏      | 20/64 [00:26<00:58,  1.33s/it] 33%|███▎      | 21/64 [00:27<00:57,  1.33s/it] 34%|███▍      | 22/64 [00:29<00:55,  1.33s/it] 36%|███▌      | 23/64 [00:30<00:54,  1.33s/it] 38%|███▊      | 24/64 [00:31<00:53,  1.33s/it] 39%|███▉      | 25/64 [00:33<00:51,  1.33s/it] 41%|████      | 26/64 [00:34<00:50,  1.33s/it] 42%|████▏     | 27/64 [00:35<00:49,  1.33s/it] 44%|████▍     | 28/64 [00:37<00:47,  1.33s/it] 45%|████▌     | 29/64 [00:38<00:46,  1.33s/it] 47%|████▋     | 30/64 [00:39<00:45,  1.33s/it] 48%|████▊     | 31/64 [00:41<00:43,  1.33s/it] 50%|█████     | 32/64 [00:42<00:42,  1.33s/it] 52%|█████▏    | 33/64 [00:43<00:41,  1.33s/it] 53%|█████▎    | 34/64 [00:45<00:39,  1.33s/it] 55%|█████▍    | 35/64 [00:46<00:38,  1.33s/it] 56%|█████▋    | 36/64 [00:47<00:37,  1.33s/it] 58%|█████▊    | 37/64 [00:49<00:35,  1.33s/it] 59%|█████▉    | 38/64 [00:50<00:34,  1.33s/it] 61%|██████    | 39/64 [00:51<00:33,  1.33s/it] 62%|██████▎   | 40/64 [00:53<00:31,  1.33s/it] 64%|██████▍   | 41/64 [00:54<00:30,  1.33s/it] 66%|██████▌   | 42/64 [00:55<00:29,  1.33s/it] 67%|██████▋   | 43/64 [00:57<00:27,  1.33s/it] 69%|██████▉   | 44/64 [00:58<00:26,  1.33s/it] 70%|███████   | 45/64 [00:59<00:25,  1.33s/it] 72%|███████▏  | 46/64 [01:01<00:23,  1.33s/it] 73%|███████▎  | 47/64 [01:02<00:22,  1.33s/it] 75%|███████▌  | 48/64 [01:03<00:21,  1.33s/it] 77%|███████▋  | 49/64 [01:05<00:19,  1.33s/it] 78%|███████▊  | 50/64 [01:06<00:18,  1.33s/it] 80%|███████▉  | 51/64 [01:07<00:17,  1.33s/it] 81%|████████▏ | 52/64 [01:09<00:15,  1.33s/it] 83%|████████▎ | 53/64 [01:10<00:14,  1.33s/it] 84%|████████▍ | 54/64 [01:11<00:13,  1.33s/it] 86%|████████▌ | 55/64 [01:13<00:11,  1.33s/it] 88%|████████▊ | 56/64 [01:14<00:10,  1.33s/it] 89%|████████▉ | 57/64 [01:15<00:09,  1.33s/it] 91%|█████████ | 58/64 [01:17<00:07,  1.33s/it] 92%|█████████▏| 59/64 [01:18<00:06,  1.33s/it] 94%|█████████▍| 60/64 [01:19<00:05,  1.33s/it] 95%|█████████▌| 61/64 [01:21<00:03,  1.33s/it] 97%|█████████▋| 62/64 [01:22<00:02,  1.33s/it] 98%|█████████▊| 63/64 [01:23<00:01,  1.33s/it]100%|██████████| 64/64 [01:25<00:00,  1.33s/it]100%|██████████| 64/64 [01:25<00:00,  1.33s/it]
